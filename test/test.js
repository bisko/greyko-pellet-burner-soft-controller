const assert = require( 'assert' );
let mocha = require( 'mocha' );
const { getResponseData } = require( "../src/burner/greyko-communication-helpers" );
let describe = mocha.describe;

describe( 'Response validation', () => {
	it( 'Case 1', function() {
		const testCase = Buffer.from( [0x5a, 0x5a, 0x1d, 0x16, 0x16, 0x22, 0x59, 0x09, 0x06, 0x07, 0x27, 0x0a, 0x09, 0x13, 0x0b, 0x8c, 0x0d, 0x0e, 0x0f, 0x47, 0x47, 0x92, 0x93, 0xb2, 0x1d, 0x16, 0x3f, 0x1a, 0x19, 0x20, 0x07, 0x7c] );
		assert.equal( getResponseData( testCase ).toString( 'hex' ), '16152056050101200200090080000000373680809e080028020006ec' );
	} );

	it( 'Case 2', function() {
		const testCase = Buffer.from( [0x5A, 0x5A, 0x1D, 0x16, 0x14, 0x13, 0x09, 0x2C, 0x1A, 0x07, 0x1E, 0x09, 0x09, 0x13, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x47, 0x44, 0x3A, 0x93, 0xC2, 0x1D, 0x16, 0x45, 0x1A, 0x19, 0x1A, 0x1B, 0x67] );
		assert.equal( getResponseData( testCase ).toString( 'hex' ), '1613110628150117010009000000000037332880ae08002e02000000' );
	} );

	it( 'Case 3', function() {
		const testCase = Buffer.from( [0x5a, 0x5a, 0x1d, 0x16, 0x16, 0x25, 0x05, 0x49, 0x35, 0x18, 0x20, 0x0a, 0x09, 0x0a, 0x0b, 0x8c, 0x0d, 0x0e, 0x0f, 0x47, 0x33, 0x92, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0xb3] );
		assert.equal( getResponseData( testCase ).toString( 'hex' ), '16152302453012190200000080000000372280000000000000000000' );
	} );
} );
